a,
abbr,
acronym,
address,
applet,
article,
aside,
audio,
b,
big,
blockquote,
body,
canvas,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
div,
dl,
dt,
em,
embed,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
mark,
menu,
nav,
object,
ol,
output,
p,
pre,
q,
ruby,
s,
samp,
section,
small,
span,
strike,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
tt,
u,
ul,
var,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote::after,
blockquote::before,
q::after,
q::before {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* BASE */
/* BACKGROUND */
/* TEXT */
/* BORDER */
/* INTERACTIVE */
@font-face {
  font-family: "Onest";
  src: url("../fonts/Onest-ExtraBold.woff2") format("woff2"), url("../fonts/Onest-ExtraBold.woff") format("woff");
  font-weight: 800;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Onest";
  src: url("../fonts/Onest-Bold.woff2") format("woff2"), url("../fonts/Onest-Bold.woff") format("woff");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Onest";
  src: url("../fonts/Onest-Regular.woff2") format("woff2"), url("../fonts/Onest-Regular.woff") format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
html {
  font-size: 12px;
  scroll-behavior: smooth;
}
@media (min-width: 400px) {
  html {
    font-size: 13.2px;
  }
}
@media (min-width: 650px) {
  html {
    font-size: 12px;
  }
}
@media (min-width: 1200px) {
  html {
    font-size: 12px;
  }
}
@media (min-width: 1440px) {
  html {
    font-size: 14.4px;
  }
}

body {
  position: relative;
  font-size: 1.1666666667rem;
  -webkit-font-smoothing: antialiased;
  color: hsl(0, 0%, 100%);
  font-family: "Onest", -apple-system, system-ui, BlinkMacSystemFont, Helvetica, Arial, sans-serif;
  background-color: hsl(0, 0%, 9%);
  -webkit-backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  min-width: 320px;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

img {
  height: auto;
  width: auto;
}

.container {
  box-sizing: border-box;
  margin: 0 auto;
  width: 100%;
  max-width: 100rem;
}
@media (min-width: 360px) {
  .container {
    padding-left: 5.3%;
    padding-right: 5.3%;
  }
}
@media (min-width: 414px) {
  .container {
    padding-left: 4.58%;
    padding-right: 4.58%;
  }
}
@media (min-width: 650px) {
  .container {
    padding-left: 6.15%;
    padding-right: 6.15%;
  }
}
@media (min-width: 768px) {
  .container {
    padding-right: 2.6%;
    padding-left: 2.6%;
  }
}
@media (min-width: 1200px) {
  .container {
    padding-right: 2.6666666667rem;
    padding-left: 2.6666666667rem;
  }
}

main {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.button,
button {
  border: none;
  cursor: pointer;
  font-family: "Onest", -apple-system, system-ui, BlinkMacSystemFont, "Helvetica", "Arial", "sans-serif";
  background: none;
  padding: 0;
  margin: 0;
  overflow: visible;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  text-align: center;
}

*:focus {
  outline: none;
}

a {
  text-decoration: none;
  color: inherit;
}

[data-src] {
  transition: opacity 0.3s ease;
  opacity: 0;
  will-change: transform, opacity;
}

.lazyload {
  opacity: 0;
  will-change: transform, opacity;
}

.lazyloaded {
  opacity: 1;
}

.hidden {
  display: none !important;
}

@media (max-width: 649px) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (max-width: 767px) {
  .hidden-mobile-late {
    display: none !important;
  }
}

@media (max-width: 1199px) {
  .hidden-tablet {
    display: none !important;
  }
}

@media (min-width: 1200px) {
  .hidden-desktop {
    display: none !important;
  }
}

.show-mobile {
  display: none !important;
}
@media (max-width: 649px) {
  .show-mobile {
    display: block !important;
  }
}

@media (hover: hover), (min-width: 1200px) {
  .scroll-animated-top,
  .scroll-animated-bottom {
    transition: 0.5s ease;
    transition-property: opacity, transform;
    opacity: 0;
  }
  .scroll-animated-top {
    transform: translateY(8.3333333333rem);
  }
  .scroll-animated-bottom {
    transform: translateY(15rem);
  }
  .is-visible .scroll-animated-top,
  .is-visible .scroll-animated-bottom {
    opacity: 1;
    transform: translateY(0);
  }
  .main-appear-blue,
  .main-appear-white,
  .main-appear-phone,
  .main-appear-logo {
    transition: 0.6s ease;
    transition-property: opacity, transform;
    opacity: 0;
  }
  .main-appear-blue {
    transition-delay: 0.6s;
  }
  .main-appear-white {
    transition-delay: 0.3s;
  }
  .main-appear-blue {
    transform: scale(0.1);
  }
  .main-appear-white {
    transform: scale(0.1);
  }
  .main-appear-phone {
    transform: translateY(8.3333333333rem);
  }
  .main-appear-logo {
    transform: translateY(15rem);
  }
  .is-visible .main-appear-blue {
    transform: scale(1);
    opacity: 1;
  }
  .is-visible .main-appear-white {
    transform: scale(1);
    opacity: 1;
  }
  .is-visible .main-appear-logo,
  .is-visible .main-appear-phone {
    transform: translateY(0);
    opacity: 1;
  }
}
.image {
  display: flex;
  width: 100%;
}
.image__main {
  max-width: 100%;
  max-height: 100%;
  width: 100%;
  object-fit: cover;
}

/* BASE */
/* BACKGROUND */
/* TEXT */
/* BORDER */
/* INTERACTIVE */
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
